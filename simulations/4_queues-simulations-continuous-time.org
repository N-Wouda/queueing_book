#+title: Queueing Theory: Queues in continuous time

#+SUBTITLE: EBB074A05
#+author: Nicky D. van Foreest
#+date: 2020:12:17

#+STARTUP: indent
#+STARTUP: overview 
#+OPTIONS:  toc:nil

#+include: preamble.org

#+PROPERTY: header-args :session  :exports both   :dir "./figures/" :results output



* General info
This file contains the code and the results that  go with this youtube movie: https://youtu.be/bCU3oP6r-00.

** TODO Set theme and font size

Set the theme and font size so that it is easier to read on youbute

#+begin_src emacs-lisp :exports code
(load-theme 'material-light t)
(set-face-attribute 'default nil :height 200)
#+end_src

#+RESULTS:

By the way, this is emacs lisp; you cannot run it in python.


** Load standard modules 
#+begin_src python :exports code
import numpy as np
import matplotlib.pylab as plt
from matplotlib import style

style.use('ggplot')

np.random.seed(3)
#+end_src

#+RESULTS:
: None



* Computing waiting times

** Interarrival times

#+begin_src python
labda = 3
X = np.random.exponential(scale=labda, size=10)
print(X)
#+end_src

#+RESULTS:
| 2.40084716 | 3.69452354 | 1.03129621 | 2.14512092 | 6.70329244 | 6.79855956 | 0.40260163 | 0.69671515 | 0.15851674 | 1.74379707 |

** Arrival times

#+begin_src python
A = X.cumsum()
print(A)
#+end_src

#+RESULTS:
| 2.40084716 | 6.0953707 | 7.12666691 | 9.27178782 | 15.97508026 | 22.77363983 | 23.17624146 | 23.8729566 | 24.03147334 | 25.77527041 |

This is wrong. Why?


This is better:
#+begin_src python
A = np.zeros(len(X) + 1)
A[1:] = X.cumsum()
print(A)
#+end_src

#+RESULTS:
| 0 | 2.40084716 | 6.0953707 | 7.12666691 | 9.27178782 | 15.97508026 | 22.77363983 | 23.17624146 | 23.8729566 | 24.03147334 | 25.77527041 |

** Service times
#+begin_src python
mu = 1.2 * labda
S = np.random.exponential(scale=mu,size=len(A))
print(S)
#+end_src

#+RESULTS:
| 0.10919375 | 2.19721993 | 3.77056631 | 1.17505899 | 4.06007571 | 3.21733717 | 0.08738687 | 2.94616653 | 1.08034342 | 1.93073916 | 1.20028334 |

Note, ~S[0]~ remains unused; it corresponds to job 0, but there is no job 0.


** Departure times
#+begin_src python
D = np.zeros_like(A)

for k in range(1, len(A)):
    D[k] = max(D[k-1], A[k]) + S[k]

print(D)
#+end_src

#+RESULTS:
| 0 | 4.59806709 | 9.86593702 | 11.040996 | 15.10107171 | 19.19241743 | 22.86102669 | 26.12240799 | 27.20275141 | 29.13349057 | 30.33377391 |

** Waiting times
#+begin_src python
W = D - A
print(W)
#+end_src

#+RESULTS:
| 0 | 2.19721993 | 3.77056631 | 3.9143291 | 5.82928389 | 3.21733717 | 0.08738687 | 2.94616653 | 3.32979481 | 5.10201723 | 4.5585035 |

** KPIs and plot

#+begin_src python
print(W.mean(), W.std())
#+end_src

#+RESULTS:
| 3.177509575645523 | 1.7638308028443408 |

#+begin_src python :results value file
plt.clf()
plt.plot(W)
plt.savefig("wait.png")
"wait.png"
#+end_src

#+RESULTS:
[[file:wait.png]]

** Is the queue stable?
Let's do a longer simulation
#+begin_src python :results value file
num = 1000
labda = 3
X = np.random.exponential(scale=labda, size=num)
A = np.zeros(len(X) + 1)
A[1:] = X.cumsum()
mu = 1.2 * labda
S = np.random.exponential(scale=mu,size=len(A))
D = np.zeros_like(A)

for k in range(1, len(A)):
    D[k] = max(D[k-1], A[k]) + S[k]

W = D - A

plt.clf()
plt.plot(W)
plt.savefig("wait2.png")
"wait2.png"
#+end_src

#+RESULTS:
[[file:wait2.png]]

It's increasing. Let's try for another mu.

#+begin_src python :results value file
num = 1000
labda = 3
X = np.random.exponential(scale=labda, size=num)
A = np.zeros(len(X) + 1)
A[1:] = X.cumsum()
mu = 0.9 * labda  # changed 1.2 to 0.9
S = np.random.exponential(scale=mu,size=len(A))
D = np.zeros_like(A)

for k in range(1, len(A)):
    D[k] = max(D[k-1], A[k]) + S[k]

W = D - A

plt.clf()
plt.plot(W)
plt.savefig("wait3.png")
"wait3.png"
#+end_src

#+RESULTS:
[[file:wait3.png]]


** Queue length
We have the waiting times, but not the number of jobs in queue. How to compute the number of jobs in queue? We walk backwards!

#+begin_src python
num = 10
X = np.random.exponential(scale=labda, size=num)
A = np.zeros(len(X) + 1)
A[1:] = X.cumsum()
mu = 0.9 * labda  # changed 1.2 to 0.9
S = np.random.exponential(scale=mu,size=len(A))
D = np.zeros_like(A)

for k in range(1, len(A)):
    D[k] = max(D[k-1], A[k]) + S[k]

L = np.zeros_like(A)
for k in range(1, len(A)):
    l = k - 1
    while D[l] > A[k]:
        l -= 1
    L[k] = k - l

print(L)
#+end_src

#+RESULTS:
| 0 | 1 | 1 | 2 | 3 | 2 | 3 | 4 | 3 | 1 | 1 |

A longer run.

#+begin_src python :results value file
num = 100
X = np.random.exponential(scale=labda, size=num)
A = np.zeros(len(X) + 1)
A[1:] = X.cumsum()
mu = 0.9 * labda  # changed 1.2 to 0.9
S = np.random.exponential(scale=mu,size=len(A))
D = np.zeros_like(A)

for k in range(1, len(A)):
    D[k] = max(D[k-1], A[k]) + S[k]

W = D - A

L = np.zeros_like(A)
for k in range(1, len(A)):
    l = k
    while D[l] > A[k]:
        l -= 1
    L[k] = k - l - 1

plt.clf()
plt.plot(L, color='red')
plt.plot(W, color='black')
plt.savefig("wait4.png")
"wait4.png"
#+end_src

#+RESULTS:
[[file:wait4.png]]


* Multiserver queue in continuous time
#+begin_src python
m = 3
N = 10

one = np.ones(m, dtype=int)  #  vector with ones

X = np.ones(N + 1, dtype=int)
S = 5 * np.ones(N, dtype=int)
w = np.zeros(m, dtype=int)

for k in range(1, N):
    s = w.argmin()  # server with smallest waiting time
    w[s] += S[k]  # assign arrival too this server
    w = np.maximum(0, w - X[k + 1] * one)

print(w)
#+end_src

* Interesting challenges
\begin{exercise}
Estimate the  distribution of the server's busy and idle times in the single server case
\end{exercise}
\begin{exercise}
Design tests to check that the code to compute ~L~ is correct, or else, to find and repair the bugs.
\end{exercise}
\begin{exercise}
Can the code for the multi server be changed such that the individual servers can have different speeds? I think that the vector =one= has to be changed such that the entries correspond to the speeds of the servers, but is that so? And if so, does the algorithm allow for this change?
\end{exercise}


* Restore my emacs settings
#+begin_src emacs-lisp
(load-theme 'material t)
(set-face-attribute 'default nil :height 100)
#+end_src

#+RESULTS:
